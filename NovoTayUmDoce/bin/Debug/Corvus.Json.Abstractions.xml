<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.IPropertyBag">
            <summary>
            A read-only key/value collection, typically implemented over a serialized store.
            </summary>
        </member>
        <member name="M:Corvus.Json.IPropertyBag.TryGet``1(System.String,``0@)">
            <summary>
            Determines whether the bag contains a value with the specified key, and if so retrieves
            it. This will deserialize the relevant data if it has not already been deserialized.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="key">The key identifying the entry in the bag.</param>
            <param name="result">
            The variable in which to store the result. Will be set to <c>default(T)</c> if no entry
            with the specified key exists.
            </param>
            <returns>
            True if a value with the specified key was present. False if not.
            </returns>
            <exception cref="T:Corvus.Json.SerializationException">
            Thrown if the data is present but cannot be deserialized to the specified type.
            </exception>
        </member>
        <member name="T:Corvus.Json.IPropertyBagFactory">
            <summary>
            Provides operations for creating, and modifying an <see cref="T:Corvus.Json.IPropertyBag"/>.
            </summary>
            <remarks>
            <para>
            <see cref="T:Corvus.Json.IPropertyBag"/> is a read-only abstraction, since it designed primarily as a
            view over a serialized representation. The presumption is that some serialized form exists
            somewhere, and that we don't want to deserialize it into objects until we know that the
            relevant information is definitely needed. However, there are occasions when new property
            bags need to be built, most notably when modifying or creating new instances of some type
            that has a property bag. (For example, Corvus.Tenancy's ITenant includes a property bag,
            and in cases where we create a new tenant, or we modify the properties of an existing
            tenant, <see cref="T:Corvus.Json.IPropertyBag"/>'s read-only abstraction is no longer sufficient.)
            </para>
            <para>
            This interface supports these "create" and "modify" scenarios. Code that needs to work
            with property bags can use this interface without needing to know which particular
            implementation is in use. (E.g. Json.NET vs System.Text.Json.)
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.IPropertyBagFactory.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a new <see cref="T:Corvus.Json.IPropertyBag"/> with the specified properties.
            </summary>
            <param name="values">
            The values with which to populate the property bag.
            </param>
            <returns>
            A new property bag.
            </returns>
            <remarks>
            This supports scenarios where a serialized form of the properties does not yet exist
            (e.g., creation of new entities).
            </remarks>
        </member>
        <member name="M:Corvus.Json.IPropertyBagFactory.CreateModified(Corvus.Json.IPropertyBag,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Corvus.Json.IPropertyBag"/> based on an existing bag, but with some
            properties either added, updated, or removed.
            </summary>
            <param name="input">The property bag on which to base the new bag.</param>
            <param name="propertiesToSetOrAdd">
            Key and value pairs to update or add.
            </param>
            <param name="propertiesToRemove">
            The keys of the properties to remove.
            </param>
            <returns>A new <see cref="T:Corvus.Json.IPropertyBag"/> with the specified changes.</returns>
            <exception cref="T:System.ArgumentNullException">
            At least one of <c>propertiesToSetOrAdd</c> or <c>propertiesToRemove</c> must be non-null.
            If both are null, the call would have no effect, so we throw this exception.
            </exception>
            <remarks>
            This supports scenarios where properties are being modified.
            </remarks>
        </member>
        <member name="T:Corvus.Json.PropertyBagEntryType">
            <summary>
            Describes the data type of an entry in an <see cref="T:Corvus.Json.IPropertyBag"/>.
            </summary>
            <remarks>
            <para>
            Implementations of <see cref="T:Corvus.Json.IPropertyBag"/> that allow consumers to discover the contents
            at runtime will implement <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <c>(string key, PropertyBagEntryType type</c>
            tuples.
            </para>
            </remarks>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Boolean">
            <summary>
            A true or false value.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Integer">
            <summary>
            A number with no decimal point.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Decimal">
            <summary>
            A number with a decimal point in it.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Array">
            <summary>
            An array.
            </summary>
        </member>
        <member name="F:Corvus.Json.PropertyBagEntryType.Object">
            <summary>
            A nested object.
            </summary>
        </member>
        <member name="T:Corvus.Json.PropertyBagExtensions">
            <summary>
            Extension methods for <see cref="T:Corvus.Json.IPropertyBag"/>.
            </summary>
        </member>
        <member name="M:Corvus.Json.PropertyBagExtensions.Create(Corvus.Json.IPropertyBagFactory,System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Creates a property bag from a callback that produces a collection of key pair values.
            </summary>
            <param name="propertyBagFactory">The property bag factory.</param>
            <param name="builder">A function that builds the property collection.</param>
            <returns>A new property bag.</returns>
            <remarks>
            <para>
            This supports property builders designed to be chained together, e.g.:
            </para>
            <code><![CDATA[
            IPropertyBag childProperties = this.propertyBagFactory.Create(start =>
                start.AddBlobStorageConfiguration(ContainerDefinition, tenancyStorageConfiguration));
            ]]></code>
            <para>
            It calls <see cref="M:Corvus.Json.IPropertyBagFactory.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/>
            with the resulting properties.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.PropertyBagExtensions.CreateModified(Corvus.Json.IPropertyBagFactory,Corvus.Json.IPropertyBag,System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Corvus.Json.IPropertyBag"/> based on an existing bag, but with some
            properties either added, updated, or removed, using a callback that produces a
            collection of key pair values to describe the properties to add or change.
            </summary>
            <param name="propertyBagFactory">The property bag factory.</param>
            <param name="input">The property bag on which to base the new one.</param>
            <param name="builder">A function that builds the collection describing the properties to add.</param>
            <param name="propertiesToRemove">Optional list of properties to remove.</param>
            <returns>A collection of key pair values.</returns>
            <remarks>
            <para>
            Similar to
            <see cref="M:Corvus.Json.PropertyBagExtensions.Create(Corvus.Json.IPropertyBagFactory,System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})"/>,
            this supports property builders designed to be chained together. Whereas that method
            is for creating a new property bag from scratch, this invokes
            <see cref="M:Corvus.Json.IPropertyBagFactory.CreateModified(Corvus.Json.IPropertyBag,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.String})"/>.
            For example:
            </para>
            <code><![CDATA[
            IPropertyBag childProperties = propertyBagFactory.CreateModified(
                existingPropertyBag,
                values => values.AddBlobStorageConfiguration(ContainerDefinition, tenancyStorageConfiguration));
            ]]></code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.PropertyBagExtensions.AsDictionary(Corvus.Json.IPropertyBag)">
            <summary>
            Retrieves the properties as a dictionary.
            </summary>
            <param name="propertyBag">The property bag.</param>
            <returns>A dictionary containing all of the properties in the bag.</returns>
            <remarks>
            <para>
            The types of the individual entries will either be .NET primitive types (e.g. int, string, etc) or further
            <see cref="T:Corvus.Json.IPropertyBag"/>s. Any arrays in the source <see cref="T:Corvus.Json.IPropertyBag"/> will be added to the
            dictionary as arrays of <see cref="T:System.Object"/>, with array elements being further .NET primitive types of
            <see cref="T:Corvus.Json.IPropertyBag"/>s.
            </para>
            </remarks>
        </member>
        <member name="M:Corvus.Json.PropertyBagExtensions.AsDictionaryRecursive(Corvus.Json.IPropertyBag)">
            <summary>
            Retrieves the properties as a dictionary.
            </summary>
            <param name="propertyBag">The <see cref="T:Corvus.Json.IPropertyBag"/> to convert.</param>
            <returns>A dictionary containing all of the properties in the bag.</returns>
            <remarks>
            <para>
            This method extends the <see cref="M:Corvus.Json.PropertyBagExtensions.AsDictionary(Corvus.Json.IPropertyBag)"/> method by recursively processing the
            result dictionary and converting any nested <see cref="T:Corvus.Json.IPropertyBag"/> instances to further
            <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>s.
            </para>
            <para>
            As a result, this is a potentially expensive operation. It should not be called repeatedly; the result from
            a call should be stored and reused.
            </para>
            </remarks>
        </member>
        <member name="T:Corvus.Json.PropertyBagValues">
            <summary>
            Helps build values in the form required by <see cref="T:Corvus.Json.IPropertyBagFactory"/>.
            </summary>
        </member>
        <member name="P:Corvus.Json.PropertyBagValues.Empty">
            <summary>
            Gets an empty configuration for a property bag.
            </summary>
            <remarks>
            <para>
            There are two main scenarios for this property.
            </para>
            <para>
            One is if you need to create an empty property bag. If you have an implementation of
            <see cref="T:Corvus.Json.IPropertyBagFactory"/> to hand you can pass this to its
            <see cref="M:Corvus.Json.IPropertyBagFactory.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/>
            method:
            </para>
            <code><![CDATA[
            IPropertyBag empty = propertyBagFactory.Create(PropertyBagConfiguration.Empty);
            ]]></code>
            <para>
            The second is when building up property bags with functions that chain together,
            and which therefore require an initial enumerable sequence to start with. For
            example, Corvus.Tenancy's tenanted storage providers offer extension methods for
            adding their configuration to an existing collection. This can act as the starting
            point for a chain of such methods, e.g.:
            </para>
            <code><![CDATA[
            IPropertyBag childProperties = this.propertyBagFactory.Create(
                PropertyBagValues
                    .Empty
                    .AddBlobStorageConfiguration(ContainerDefinition, tenancyStorageConfiguration)
                    .Create());
            ]]></code>
            </remarks>
        </member>
        <member name="M:Corvus.Json.PropertyBagValues.Build(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Builds a collection of property bag values from a callback that produces a collection
            of key pair values.
            </summary>
            <param name="builder">A function that builds the property collection.</param>
            <returns>A collection of key pair values.</returns>
            <remarks>
            <para>
            Similar to
            <see cref="M:Corvus.Json.PropertyBagExtensions.Create(Corvus.Json.IPropertyBagFactory,System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})"/>,
            this supports property builders designed to be chained together. Whereas that method
            goes on to call <see cref="M:Corvus.Json.IPropertyBagFactory.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/>,
            this just produces the property collection resulting from the chained builder.
            </para>
            <code><![CDATA[
            IPropertyBag childProperties = propertyBagFactory.CreateModified(
                existingPropertyBag,
                PropertyBagValues.Build(start => start.AddBlobStorageConfiguration(ContainerDefinition, tenancyStorageConfiguration));
            ]]></code>
            </remarks>
        </member>
        <member name="T:Corvus.Json.SerializationException">
            <summary>
            Thrown when a failure occurs while attempting to serailize or deserialize data.
            </summary>
        </member>
        <member name="M:Corvus.Json.SerializationException.#ctor(System.Exception)">
            <summary>
            Creates a <see cref="T:Corvus.Json.SerializationException"/>.
            </summary>
            <param name="innerException">The underlying exception.</param>
        </member>
        <member name="M:Corvus.Json.SerializationException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Corvus.Json.SerializationException"/>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Corvus.Json.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <see cref="T:Corvus.Json.SerializationException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The underlying exception.</param>
        </member>
        <member name="M:Corvus.Json.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a <see cref="T:Corvus.Json.SerializationException"/> when the exception itself has
            been serialized.
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
    </members>
</doc>
