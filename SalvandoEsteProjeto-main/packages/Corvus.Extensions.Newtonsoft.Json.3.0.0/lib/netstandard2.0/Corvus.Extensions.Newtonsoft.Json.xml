<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Extensions.Newtonsoft.Json</name>
    </assembly>
    <members>
        <member name="T:Corvus.Extensions.Json.IJsonNetPropertyBagFactory">
            <summary>
            Provides Json.NET-specific operations for working with an <see cref="T:Corvus.Json.IPropertyBag"/>.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.IJsonNetPropertyBagFactory.Create(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates a new <see cref="T:Corvus.Json.IPropertyBag"/> with the specified properties.
            </summary>
            <param name="jObject">
            The JSON from which to populate the property bag.
            </param>
            <returns>
            A new property bag.
            </returns>
        </member>
        <member name="M:Corvus.Extensions.Json.IJsonNetPropertyBagFactory.AsJObject(Corvus.Json.IPropertyBag)">
            <summary>
            Converts an <see cref="T:Corvus.Json.IPropertyBag"/> to a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="propertyBag">The property bag.</param>
            <returns>The serialized property bag.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the property bag does not support conversion to <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            The property bag must have been created by ths Json.NET property bag factory
            or associated deserialization logic for this call to succeed.
            </exception>
        </member>
        <member name="T:Corvus.Extensions.Json.IJsonSerializerSettingsProvider">
            <summary>
            A factory to get the default <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> for the context.
            </summary>
            <remarks>
            <para>
            This sets up a standard <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> instance with opinionated defaults.
            </para>
            <para>
            The default implementation uses string-based serialized for enums, and resolves <see cref="T:Newtonsoft.Json.JsonConverter"/>
            instances that are registered in the container.
            </para>
            </remarks>
        </member>
        <member name="P:Corvus.Extensions.Json.IJsonSerializerSettingsProvider.Instance">
            <summary>
            Gets an instance of the default JsonSerializerSettings.
            </summary>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.CultureInfoConverter">
            <summary>
            A standard json converter for <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.CultureInfoConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.CultureInfoConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.CultureInfoConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.DateTimeOffsetConverter">
            <summary>
            A standard json converter for <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.DateTimeOffsetConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.DateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.DateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
            <remarks>
            <para>
            Note that this will write the <see cref="T:System.DateTimeOffset"/> as a complex object containing both an ISO Date Time string with timezone, and a unix time long.
            </para>
            <code>
            ![<![CDATA[ { "dateTimeOffset": "2009-06-15T13:45:30.0000000-07:00", "unixTime": 1245098730000]]>
            </code>
            </remarks>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBag">
            <summary>
            A property bag that serializes neatly using Json.NET.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.#ctor(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a <see cref="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBag"/> from a <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="jobject">The JObject from which to initialize the property bag.</param>
            <param name="serializerSettings">The serializer settings to use for the property bag.</param>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a <see cref="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBag"/> from a dictionary of properties.
            </summary>
            <param name="dictionary">A dictionary with which to initialize the bag.</param>
            <param name="serializerSettings">The serializer settings to use for the property bag.</param>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.op_Implicit(Corvus.Extensions.Json.Internal.JsonNetPropertyBag)~Newtonsoft.Json.Linq.JObject">
            <summary>
            Implicit cast from <see cref="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBag"/> to <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="bag">The property bag to cast.</param>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.TryGet``1(System.String,``0@)">
            <summary>
            Get a strongly typed property.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="key">The property key.</param>
            <param name="result">The result.</param>
            <returns>True if the object was found.</returns>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBag.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory">
            <summary>
            Json.NET-specific implementation of <see cref="T:Corvus.Json.IPropertyBagFactory"/>.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory.#ctor(Corvus.Extensions.Json.IJsonSerializerSettingsProvider)">
            <summary>
            Creates a <see cref="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory"/>.
            </summary>
            <param name="serializerSettingsProvider">Provides serialization settings.</param>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory.AsJObject(Corvus.Json.IPropertyBag)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory.Create(Newtonsoft.Json.Linq.JObject)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonNetPropertyBagFactory.CreateModified(Corvus.Json.IPropertyBag,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.JsonSerializerSettingsProvider">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Extensions.Json.Internal.JsonSerializerSettingsProvider"/> class.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.JsonSerializerSettingsProvider.#ctor(System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Extensions.Json.Internal.JsonSerializerSettingsProvider"/> class.
            </summary>
            <param name="converters">The list of JsonConverters to add.</param>
            <remarks>
            You should not modify these settings directly. They are shared by all users.
            </remarks>
        </member>
        <member name="P:Corvus.Extensions.Json.Internal.JsonSerializerSettingsProvider.Instance">
            <summary>
            Gets the instance of JsonSerializerSettings to use as the default.
            </summary>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.PropertyBagConverter">
            <summary>
            A standard json converter for <see cref="T:Corvus.Extensions.Json.Internal.JsonNetPropertyBag"/>.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.PropertyBagConverter.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Extensions.Json.Internal.PropertyBagConverter"/> class.
            </summary>
            <param name="serviceProvider">The service provider for the context.</param>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.PropertyBagConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.PropertyBagConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.PropertyBagConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Corvus.Extensions.Json.Internal.StandardContractResolver">
            <summary>
            A standard endjin contract resolver.
            </summary>
        </member>
        <member name="M:Corvus.Extensions.Json.Internal.StandardContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Extensions.Json.Internal.StandardContractResolver"/> class.
            </summary>
        </member>
        <member name="P:Corvus.Extensions.Json.Internal.StandardContractResolver.Instance">
            <summary>
            Gets a standard endjin contract resolver.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions">
            <summary>
            An installer for standard <see cref="T:Newtonsoft.Json.JsonConverter"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions.AddJsonSerializerSettings(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the default JSON serialization settings.
            </summary>
            <param name="services">The target service collection.</param>
            <returns>The service collection.</returns>
            <remarks>
            <para>
            Calling this method is now equivalent to calling the following methods:
            </para>
            <list type="bullet">
                <item><c>AddJsonNetSerializerSettingsProvider</c></item>
                <item><c>AddJsonNetPropertyBag</c></item>
                <item><c>AddJsonNetCultureInfoConverter</c></item>
                <item><c>AddJsonNetDateTimeOffsetConverter</c></item>
            </list>
            <para>
            It also adds the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/>, specifying that enumerations are written as camel cased
            strings.
            </para>
            <para>
            The equivalent replacement code for this method is as follows:
            </para>
            <code>
            <![CDATA[
            services.AddJsonNetSerializerSettingsProvider();
            services.AddJsonNetPropertyBag();
            services.AddJsonNetCultureInfoConverter();
            services.AddJsonNetDateTimeOffsetToIso8601AndUnixTimeConverter();
            services.AddSingleton<JsonConverter>(new StringEnumConverter(true));
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions.AddJsonNetSerializerSettingsProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Add the default JSON serialization settings provider.
            </summary>
            <param name="services">The target service collection.</param>
            <param name="configurationCallback">Optional callback used to modify the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions.AddJsonNetPropertyBag(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the JSON.NET implementation of <see cref="T:Corvus.Json.IPropertyBagFactory"/> and <see cref="T:Corvus.Json.IPropertyBag"/>.
            </summary>
            <param name="services">The target service collection.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions.AddJsonNetDateTimeOffsetToIso8601AndUnixTimeConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the <see cref="T:Corvus.Extensions.Json.Internal.DateTimeOffsetConverter"/> to the service collection. This ensures that members of type
            <see cref="T:System.DateTimeOffset"/> are serialized as an object containing the date/time in ISO 8601 form, as well
            a unix time long.
            </summary>
            <param name="services">The target service collection.</param>
            <returns>The service collection.</returns>
            <remarks>
            <para>
            This converter is useful when the resultant serialized data is used with a store that supports querying
            and filtering. By default, ISO 8601 date/time strings include a timezone offset, but this means that
            it's not possible to use standard string comparison for sorting/filtering. Using the converter means
            that the Unix time in the resulting object can be used for sorting/filtering, while the ISO 8601 form
            is retained for deserialization so that timezone information is not lost.
            </para>
            <para>
            If you don't wish to use this converter, the alternative is to ensure all date/time values are stored as
            UTC. This means that standard string comparisons are viable, at the expense of not retaining the original
            time zone values.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializerSettingsProviderServiceCollectionExtensions.AddJsonNetCultureInfoConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the <see cref="T:Corvus.Extensions.Json.Internal.CultureInfoConverter"/> to the service collection. This ensures that members of type
            <see cref="T:System.Globalization.CultureInfo"/> are serialized as their <see cref="P:System.Globalization.CultureInfo.Name"/>.
            </summary>
            <param name="services">The target service collection.</param>
            <returns>The service collection.</returns>
        </member>
    </members>
</doc>
